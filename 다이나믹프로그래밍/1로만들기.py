'''
< 연산을 사용하는 횟수의 최솟값을 출력 >
- 정수 N이 주어졌을 때, 연산 세 개를 적절히 사용해서 1을 만들기
    1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
    2. X가 2로 나누어 떨어지면, 2로 나눈다.
    3. 1을 뺀다.
'''
# def make_one(n):
#     count = 0
#     n -= 1
#     count += 1

#     while n > 1:
#         if n % 3 == 0:
#             n //= 3
#         elif n % 2 == 0:
#             n //= 2
#         else:
#             n -= 1
#         count +=1
#     return count

# n = int(input())
# print(make_one(n))
'''
9//3=3
3//3=1
or
9-1=8
8//2=4
4//2=2
2//2=1 (오히려 늘어남)
한 번에 값을 계산 = 계산 하나씩 적용하고 그때마다 갱신 
-> 하나의 값을 계산할 때만 최소 찾음, 이전 계산 다시 할 수 있어서 비효율적
'''
# => DP
def make_one(n):
    dp = [0] * (n+1)  # 0~n 즉, n+1개 리스트 생성

    for i in range(2, n+1):  # dp[1]은 이미 1이니까 2부터 시작
        dp[i] = dp[i-1] + 1  # 1을 빼는 경우, +1은 연산 횟수
        # while문과 다름: while문은 계산을 그때마다 갱신하면서 찾는데, dp는 이미 계산된 값을 리스트에 저장하고 활용
        if i % 2 == 0:
            dp[i] = min(dp[i], dp[i//2] + 1)  # 이미 저장된 값이랑 비교해서 최소 연산 횟수 저장하기
        if i % 3 == 0:
            dp[i] = min(dp[i], dp[i//3] + 1)  # 이미 저장된 값이랑 비교해서 최소 연산 횟수 저장하기
    
    return dp[n]

n = int(input())
print(make_one(n))
'''
6//2=3
3//3=1
'''


'''
10//2=5
5-1=4
4//2=2
2//2=1
4번
or
10-1=9
9//3=3
3//3=1
3번
-----------
2//2=1 
or
2-1=1
-------------
9//3=3
3//3=1
or
9-1=8
8//2=4
4//2=2
2//2=1 (오히려 늘어남)
'''